name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "20"
  PNPM_VERSION: 9

jobs:
  # Setup shared dependencies - runs once, used by other jobs
  setup:
    runs-on: ubuntu-latest
    outputs:
      pnpm-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma generate

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ needs.setup.outputs.pnpm-cache-key }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma generate

      - name: Run linting
        run: pnpm lint

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ needs.setup.outputs.pnpm-cache-key }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma generate

      - name: Build project
        run: pnpm build
        env:
          # Skip environment validation for CI builds
          SKIP_ENV_VALIDATION: true
          # Minimal required environment variables for build
          NODE_ENV: production
          NEXT_PUBLIC_APP_URL: http://localhost:3000
          BETTER_AUTH_URL: http://localhost:3000
          BETTER_AUTH_SECRET: ci_test_secret_key_32_chars_minimum
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          # Google OAuth placeholders
          GOOGLE_CLIENT_ID: test_google_client_id
          GOOGLE_CLIENT_SECRET: test_google_client_secret
          # Additional required placeholders
          RESEND_API_KEY: test_resend_key
          OPENPANEL_SECRET_KEY: test_openpanel_secret
          NEXT_PUBLIC_OPENPANEL_CLIENT_ID: test_openpanel_client
          STRIPE_SECRET_KEY: sk_test_placeholder
          STRIPE_WEBHOOK_SECRET: whsec_placeholder
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_placeholder
          REVENUECAT_SECRET_KEY: test_revenuecat_secret
          REVENUECAT_WEBHOOK_SECRET: test_revenuecat_webhook
